import xml.etree.ElementTree as ET
import pandas as pd

NS = {'xs': 'http://www.w3.org/2001/XMLSchema'}

def extract_elements(element, current_path, results):
    for child in element.findall("xs:element", NS):
        name = child.attrib.get("name") or child.attrib.get("ref")
        if not name:
            continue

        # Build absolute XPath
        xpath = f"{current_path}/{name}" if current_path else f"/{name}"

        # Default values
        data_type = child.attrib.get("type", "complexType")
        min_occurs = child.attrib.get("minOccurs", "1")
        mandatory = "Mandatory" if min_occurs != "0" else "Optional"
        range_info = ""

        # Handle simpleType restrictions
        restriction = child.find(".//xs:restriction", NS)
        if restriction is not None:
            data_type = restriction.attrib.get("base", data_type)
            parts = []
            for tag in ["minInclusive", "maxInclusive", "minExclusive", "maxExclusive", "pattern", "length"]:
                val = restriction.find(f"xs:{tag}", NS)
                if val is not None:
                    parts.append(f"{tag}={val.attrib.get('value')}")
            range_info = ", ".join(parts)

        results.append({
            "XPath": xpath,
            "Data Type": data_type,
            "Range": range_info,
            "Sample": "",
            "Mandatory/Optional": mandatory
        })

        # Recurse into nested complexType > sequence
        complex_type = child.find("xs:complexType", NS)
        if complex_type is not None:
            sequence = complex_type.find("xs:sequence", NS)
            if sequence is not None:
                extract_elements(sequence, xpath, results)

def process_xsd(xsd_path, output_excel):
    tree = ET.parse(xsd_path)
    root = tree.getroot()
    results = []

    # Start from top-level <xs:element> (schema root)
    for element in root.findall("xs:element", NS):
        name = element.attrib.get("name")
        if name:
            extract_elements(root, "", results)  # Start with empty path to include root in full XPath
            break

    df = pd.DataFrame(results)
    df.to_excel(output_excel, index=False)
    print(f"âœ… Done! Saved to: {output_excel}")

# Example usage
xsd_file = "your_file.xsd"
output_file = "xsd_xpath_output.xlsx"
process_xsd(xsd_file, output_file)