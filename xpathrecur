import xml.etree.ElementTree as ET
import pandas as pd

NS = {'xs': 'http://www.w3.org/2001/XMLSchema'}

# Build a map of all named complexTypes
def collect_complex_types(root):
    type_map = {}
    for ct in root.findall(".//xs:complexType", NS):
        name = ct.attrib.get("name")
        if name:
            type_map[name] = ct
    return type_map

def extract_children(element, path, results, type_map):
    sequence = element.find("xs:sequence", NS)
    if sequence is not None:
        for child in sequence.findall("xs:element", NS):
            name = child.attrib.get("name")
            if not name:
                continue

            xpath = f"{path}/{name}"
            min_occurs = child.attrib.get("minOccurs", "1")
            mandatory = "Mandatory" if min_occurs != "0" else "Optional"
            data_type = child.attrib.get("type", "complexType")
            range_info = ""

            # Handle restrictions (if any)
            restriction = child.find(".//xs:restriction", NS)
            if restriction is not None:
                data_type = restriction.attrib.get("base", data_type)
                parts = []
                for tag in ["minInclusive", "maxInclusive", "minExclusive", "maxExclusive", "pattern", "length"]:
                    val = restriction.find(f"xs:{tag}", NS)
                    if val is not None:
                        parts.append(f"{tag}={val.attrib.get('value')}")
                range_info = ", ".join(parts)

            results.append({
                "XPath": xpath,
                "Data Type": data_type,
                "Range": range_info,
                "Sample": "",
                "Mandatory/Optional": mandatory
            })

            # Handle nested inline complexType
            nested_complex = child.find("xs:complexType", NS)
            if nested_complex is not None:
                extract_children(nested_complex, xpath, results, type_map)

            # Handle referenced complexType via type="..."
            elif "type" in child.attrib:
                ref_type = child.attrib["type"]
                if ":" in ref_type:
                    ref_type = ref_type.split(":")[1]  # remove namespace
                if ref_type in type_map:
                    extract_children(type_map[ref_type], xpath, results, type_map)

def process_xsd(xsd_path, output_excel):
    tree = ET.parse(xsd_path)
    root = tree.getroot()
    results = []

    type_map = collect_complex_types(root)

    # Start from the top-level root element
    for element in root.findall("xs:element", NS):
        root_name = element.attrib.get("name")
        if not root_name:
            continue

        root_xpath = f"/{root_name}"
        root_type = element.attrib.get("type", "complexType")

        results.append({
            "XPath": root_xpath,
            "Data Type": root_type,
            "Range": "",
            "Sample": "",
            "Mandatory/Optional": "Mandatory"
        })

        # Handle inline complexType
        complex_type = element.find("xs:complexType", NS)
        if complex_type is not None:
            extract_children(complex_type, root_xpath, results, type_map)

        # Handle referenced complexType
        elif "type" in element.attrib:
            ref_type = element.attrib["type"]
            if ":" in ref_type:
                ref_type = ref_type.split(":")[1]
            if ref_type in type_map:
                extract_children(type_map[ref_type], root_xpath, results, type_map)

    df = pd.DataFrame(results)
    df.to_excel(output_excel, index=False)
    print(f"âœ… Extraction complete. Saved to: {output_excel}")

# Example usage
xsd_file = "your_file.xsd"         # Replace with actual file path
output_file = "xpaths_output.xlsx"
process_xsd(xsd_file, output_file)