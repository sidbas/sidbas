import xml.etree.ElementTree as ET
import pandas as pd

NS = {'xs': 'http://www.w3.org/2001/XMLSchema'}

def extract_children(element, path, results):
    sequence = element.find("xs:sequence", NS)
    if sequence is not None:
        for child in sequence.findall("xs:element", NS):
            name = child.attrib.get("name")
            if not name:
                continue

            xpath = f"{path}/{name}"
            data_type = child.attrib.get("type", "complexType")
            min_occurs = child.attrib.get("minOccurs", "1")
            mandatory = "Mandatory" if min_occurs != "0" else "Optional"
            range_info = ""

            restriction = child.find(".//xs:restriction", NS)
            if restriction is not None:
                data_type = restriction.attrib.get("base", data_type)
                parts = []
                for tag in ["minInclusive", "maxInclusive", "minExclusive", "maxExclusive", "pattern", "length"]:
                    val = restriction.find(f"xs:{tag}", NS)
                    if val is not None:
                        parts.append(f"{tag}={val.attrib.get('value')}")
                range_info = ", ".join(parts)

            results.append({
                "XPath": xpath,
                "Data Type": data_type,
                "Range": range_info,
                "Sample": "",
                "Mandatory/Optional": mandatory
            })

            # Recurse into deeper nested structure
            nested_complex = child.find("xs:complexType", NS)
            if nested_complex is not None:
                extract_children(nested_complex, xpath, results)

def process_xsd(xsd_path, output_excel):
    tree = ET.parse(xsd_path)
    root = tree.getroot()
    results = []

    # Find root <xs:element name="Root">
    root_element = root.find("xs:element", NS)
    if root_element is None:
        print("❌ No root element found.")
        return

    root_name = root_element.attrib.get("name")
    if not root_name:
        print("❌ Root element has no name.")
        return

    root_xpath = f"/{root_name}"
    root_type = root_element.attrib.get("type", "complexType")

    results.append({
        "XPath": root_xpath,
        "Data Type": root_type,
        "Range": "",
        "Sample": "",
        "Mandatory/Optional": "Mandatory"
    })

    # Now recurse into the root element's children
    complex_type = root_element.find("xs:complexType", NS)
    if complex_type is not None:
        extract_children(complex_type, root_xpath, results)

    df = pd.DataFrame(results)
    df.to_excel(output_excel, index=False)
    print(f"✅ Extraction complete. Saved to: {output_excel}")

# Example usage
xsd_file = "your_file.xsd"         # Replace with your actual XSD file
output_file = "xpaths_output.xlsx" # Excel output
process_xsd(xsd_file, output_file)