import xml.etree.ElementTree as ET
import pandas as pd
import os

# Namespace used in XSD files
NS = {'xs': 'http://www.w3.org/2001/XMLSchema'}

def extract_elements(element, parent_path="") -> list:
    elements = []

    for child in element.findall("xs:element", NS):
        name = child.attrib.get("name") or child.attrib.get("ref")
        if name is None:
            continue

        xpath = f"{parent_path}/{name}" if parent_path else f"/{name}"
        type_ = child.attrib.get("type", "complexType")
        min_occurs = child.attrib.get("minOccurs", "1")
        mandatory = "Mandatory" if min_occurs != "0" else "Optional"

        # Extract restriction details
        restriction = child.find(".//xs:restriction", NS)
        range_info = ""
        if restriction is not None:
            type_ = restriction.attrib.get("base", type_)
            parts = []
            for tag in ["minInclusive", "maxInclusive", "minExclusive", "maxExclusive", "pattern", "length"]:
                val = restriction.find(f"xs:{tag}", NS)
                if val is not None:
                    parts.append(f"{tag}={val.attrib.get('value')}")
            range_info = ", ".join(parts)

        elements.append({
            "XPath": xpath,
            "Data Type": type_,
            "Range": range_info,
            "Sample": "",
            "Mandatory/Optional": mandatory
        })

        # Dive into nested complexTypes
        complex_type = child.find("xs:complexType", NS)
        if complex_type is not None:
            sequence = complex_type.find("xs:sequence", NS)
            if sequence is not None:
                elements += extract_elements(sequence, xpath)

    return elements

def process_xsd(xsd_file_path: str, output_excel_path: str):
    tree = ET.parse(xsd_file_path)
    root = tree.getroot()

    # Start from the root elements inside <xs:schema>
    elements_info = extract_elements(root)

    df = pd.DataFrame(elements_info)
    df.to_excel(output_excel_path, index=False)
    print(f"âœ… XPath extraction complete. Excel saved to: {output_excel_path}")

# Example usage
xsd_path = "your_file.xsd"
output_path = "xpaths_output.xlsx"
process_xsd(xsd_path, output_path)