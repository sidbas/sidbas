elif re.search(r"\b(if\b.*\bthen\b)|\belse\b", lower):
    conditions.append(line)


elif re.search(r"\bif\b.*\bthen\b", lower):
    conditions.append(line)

elif re.search(r"\b(uppercase|trim|cast|convert|format)\b", lower):
    post_processing_steps.append(line)

Populate Db1.Tbl1.Status_Flag
If Db1.Tbl1.Status = 'C' then set 'Closed'
Else if Db1.Tbl1.Status = 'O' then set 'Open'
Else set 'Pending'
Then format the value to uppercase
Finally assign to Db1.Tbl1.Status_Flag

Transformation Logic:

When Db1.Tbl1.ServiceId IN (‘C','D’) 
then Db1.Tbl1.ExecDate

By joining:

Db1.Tbl1,
Db1.Tbl2

Based on the join conditions:

Db1.Tbl1.SNo = Db1.Tbl2.SNo
And Db1.Tbl1.BId = Db1.Tbl2.BId

Transformation Logic:

When Db1.Tbl1.ServiceId IN (‘I’) 
then Db1.Tbl1.ExecDate

When Db1.Tbl1.ServiceId IN (‘O’)
then Db1.Tbl1.InstrDate

By joining:

Db1.Tbl1,
Db1.Tbl2

Based on the join conditions:

Db1.Tbl1.SNo = Db1.Tbl2.SNo
And Db1.Tbl1.BId = Db1.Tbl2.BId

Transformation Logic:

When Db1.Tbl1.ServiceId IN (‘I’) then Db1.Tbl1.ExecDate

By joining:
Db1.Tbl1,
Db1.Tbl2

Based on the join conditions:
Db1.Tbl1.SNo = Db1.Tbl2.SNo
And Db1.Tbl1.BId = Db1.Tbl2.BId

Note: Ensure ServiceId is always valid before running the transformation.



